using Avalonia.Logging;
using Serilog;
using System;

namespace TextureFetcher;


// NOTE: Uncompleted. Should be abandoned.
class AvalSerilogSink : ILogSink
{
    private static Serilog.Events.LogEventLevel
        getSerilogEventLevel(Avalonia.Logging.LogEventLevel level)
    {
        switch(level)
        {
            case LogEventLevel.Verbose:
                return Serilog.Events.LogEventLevel.Verbose;
            case LogEventLevel.Debug:
                return Serilog.Events.LogEventLevel.Debug;
            case LogEventLevel.Information:
                return Serilog.Events.LogEventLevel.Information;
            case LogEventLevel.Warning:
                return Serilog.Events.LogEventLevel.Warning;
            case LogEventLevel.Error:
                return Serilog.Events.LogEventLevel.Error;
            case LogEventLevel.Fatal:
                return Serilog.Events.LogEventLevel.Fatal;
        }
        throw new Exception("No Serilog function corresponding to given log level.");
    }


    /// <summary>
    /// Returns message string ready to be logged by Serilog from the log string
    /// generated by Avalonia.
    /// </summary>
    private static string getFormattedLog(string avaloniaLogMessage, string avaloniaArea)
    {
        return String.Format("{Source} [{Area}]: {messageTemplate}",
             "Avalonia", avaloniaArea, avaloniaLogMessage);
    }


    bool ILogSink.IsEnabled(LogEventLevel level, string area)
    {
        return true;
    }


    void ILogSink.Log(LogEventLevel level, string area, object? source, string messageTemplate)
    {

    }


    void ILogSink.Log(LogEventLevel level, string area, object? source, string messageTemplate, params object?[] propertyValues)
    {
        var messageToLog = String.Format(
            getFormattedLog(messageTemplate, area),
            propertyValues);
    }
}
